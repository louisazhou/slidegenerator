#!/usr/bin/env python3
"""
Test to validate the contents of generated PPTX files.
This test ensures that the generated PowerPoint file contains the expected content
and structure based on the input markdown.
"""

import pytest
import os
from pptx import Presentation
from pptx.util import Inches
from src.slide_generator.generator import SlideGenerator


def test_pptx_content_validation():
    """Test that the generated PPTX has expected content structure."""
    # Use the demo file generated by the example
    pptx_path = "output/demo.pptx"
    
    # Generate a fresh demo if it doesn't exist
    if not os.path.exists(pptx_path):
        generator = SlideGenerator()
        markdown_text = """# Welcome to Slide Generator

This is a demo presentation created from markdown.

## Features

- Converts markdown to PowerPoint
- Automatic layout and formatting
- Multiple slide support

---

# Second Slide

This content will be on a separate slide.

## Code Example

```python
def hello_world():
    print("Hello, World!")
    return "Success"
```

## Lists Work Too

1. First item
2. Second item
3. Third item

---

# Final Slide

Thank you for using Slide Generator!

### Questions?

Feel free to reach out for support."""
        
        os.makedirs("output", exist_ok=True)
        generator.generate(markdown_text, pptx_path)
    
    # Load the presentation
    prs = Presentation(pptx_path)
    
    # Basic structure validation
    assert len(prs.slides) >= 1, "Presentation should have at least one slide"
    print(f"\n✅ Presentation has {len(prs.slides)} slides")
    
    # Content validation
    total_shapes = 0
    slides_with_headings = 0
    slides_with_lists = 0
    slides_with_code = 0
    
    for i, slide in enumerate(prs.slides):
        shapes = list(slide.shapes)
        total_shapes += len(shapes)
        
        print(f"\n📄 Slide {i+1} has {len(shapes)} shapes:")
        
        slide_has_heading = False
        slide_has_list = False
        slide_has_code = False
        
        for j, shape in enumerate(shapes):
            if hasattr(shape, 'text') and shape.text:
                text_preview = shape.text.replace('\n', ' ')[:50] + "..." if len(shape.text) > 50 else shape.text.replace('\n', ' ')
                print(f"  📝 Shape {j+1}: '{text_preview}'")
                
                # Check for content types
                text_lower = shape.text.lower()
                
                # Detect headings (text that looks like titles)
                if any(heading in text_lower for heading in ['slide', 'welcome', 'features', 'code example', 'questions', 'final']):
                    slide_has_heading = True
                
                # Detect lists (content with bullets or numbers)
                if ('•' in shape.text or 
                    any(f'{i}.' in shape.text for i in range(1, 10)) or
                    'first item' in text_lower or 
                    'converts markdown' in text_lower):
                    slide_has_list = True
                
                # Detect code (content with programming syntax)
                if ('def ' in shape.text or 
                    'print(' in shape.text or
                    'return' in shape.text):
                    slide_has_code = True
        
        if slide_has_heading:
            slides_with_headings += 1
        if slide_has_list:
            slides_with_lists += 1
        if slide_has_code:
            slides_with_code += 1
    
    print(f"\n📊 Content Summary:")
    print(f"   Total shapes: {total_shapes}")
    print(f"   Slides with headings: {slides_with_headings}")
    print(f"   Slides with lists: {slides_with_lists}")
    print(f"   Slides with code: {slides_with_code}")
    
    # Validate content expectations
    assert total_shapes >= 10, f"Expected at least 10 shapes, got {total_shapes}"
    assert slides_with_headings >= 2, "Expected at least 2 slides with headings"
    assert slides_with_lists >= 1, "Expected at least 1 slide with lists"
    assert slides_with_code >= 1, "Expected at least 1 slide with code"
    
    print("\n✅ PPTX content validation passed!")


def test_pptx_slide_dimensions():
    """Test that slides have the correct 16:9 aspect ratio."""
    pptx_path = "output/demo.pptx"
    
    # Load the presentation
    prs = Presentation(pptx_path)
    
    # Check slide dimensions - updated to match new renderer
    # New renderer uses: 13.33" x 7.5" (16:9 ratio)
    expected_width = Inches(13.33)  # 16:9 ratio width
    expected_height = Inches(7.5)   # 16:9 ratio height
    
    # Allow some tolerance for rounding
    width_tolerance = Inches(0.1)
    height_tolerance = Inches(0.1)
    
    assert abs(prs.slide_width - expected_width) < width_tolerance, \
        f"Slide width {prs.slide_width} doesn't match expected {expected_width}"
    assert abs(prs.slide_height - expected_height) < height_tolerance, \
        f"Slide height {prs.slide_height} doesn't match expected {expected_height}"
    
    # Calculate actual aspect ratio
    actual_ratio = prs.slide_width / prs.slide_height
    expected_ratio = 16.0 / 9.0
    
    assert abs(actual_ratio - expected_ratio) < 0.1, \
        f"Aspect ratio {actual_ratio:.2f} doesn't match expected 16:9 ratio ({expected_ratio:.2f})"
    
    print(f"✅ Slide dimensions correct: {prs.slide_width/914400:.1f}\" x {prs.slide_height/914400:.1f}\"")


if __name__ == "__main__":
    # Allow running this test standalone for manual validation
    test_pptx_content_validation()
    test_pptx_slide_dimensions()
    print("\n🎉 All PPTX validation tests passed!") 